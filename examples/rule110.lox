class Rule110 {
  init(size) {
    this.size = size;
    this.cells = Array(this.size);

    // Initialize all cells to 0 except the last one to 1
    for (var i = 0; i < this.size; i = i + 1) {
      if (i == this.size - 1) {
        this.cells.set(i, 1);
      } else {
        this.cells.set(i, 0);
      }
    }
  }

  nextState(left, center, right) {
    // Rule 110 in binary: 01101110
    if (left == 1 and center == 1 and right == 1) return 0; // 111 -> 0
    if (left == 1 and center == 1 and right == 0) return 1; // 110 -> 1
    if (left == 1 and center == 0 and right == 1) return 1; // 101 -> 1
    if (left == 1 and center == 0 and right == 0) return 0; // 100 -> 0
    if (left == 0 and center == 1 and right == 1) return 1; // 011 -> 1
    if (left == 0 and center == 1 and right == 0) return 1; // 010 -> 1
    if (left == 0 and center == 0 and right == 1) return 1; // 001 -> 1
    if (left == 0 and center == 0 and right == 0) return 0; // 000 -> 0
    return 0;
  }

  step() {
    var newCells = Array(this.size);

    for (var i = 0; i < this.size; i = i + 1) {
      var left;
      if (i == 0) {
        left = 0;
      } else {
        left = this.cells.get(i - 1);
      }

      var center = this.cells.get(i);

      var right;
      if (i == this.size - 1) {
        right = 0;
      } else {
        right = this.cells.get(i + 1);
      }

      var next = this.nextState(left, center, right);
      newCells.set(i, next);
    }

    this.cells = newCells;
  }

  toString() {
    var line = "";
    for (var i = 0; i < this.size; i = i + 1) {
      if (this.cells.get(i) == 1) {
        line = line + "#";
      } else {
        line = line + " ";
      }
    }
    print line;
  }
}

// Run the simulation
var steps = 100;
var size = 100; // Define the size of the cellular automaton
var automaton = Rule110(size);

for (var i = 0; i < steps; i = i + 1) {
  automaton.toString();
  automaton.step();
}
